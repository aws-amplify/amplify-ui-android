// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    repositories {
        google()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:7.3.1'
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.8.10'
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:1.8.10"
        classpath 'org.jlleitschuh.gradle:ktlint-gradle:11.0.0'

    }
}

plugins {
    id 'com.android.application' version '7.3.1' apply false
    id 'com.android.library' version '7.3.1' apply false
    id 'org.jetbrains.kotlin.android' version '1.8.10' apply false
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.8.10' apply false
}

def optInAnnotations = [
    "com.amplifyframework.annotations.InternalApiWarning",
    "com.amplifyframework.annotations.InternalAmplifyApi"
]

allprojects {
    repositories {
        google()
        mavenCentral()
    }

    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:all" << "-Werror"
        }
        tasks.withType(Test) {
            minHeapSize = '128m'
            maxHeapSize = '4g'
        }
        tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
            kotlinOptions {
                optInAnnotations.each {annotation ->
                    freeCompilerArgs += "-opt-in=" + annotation
                }
            }
        }
    }
}

apply plugin: 'org.jetbrains.dokka'
dokkaHtmlCollector {
    outputDirectory = rootProject.buildDir
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

ext {
    compileSdkVersion = 33
    minSdkVersion = 24
    targetSdkVersion = 33
    amplifyVersion = '2.7.1'
    cameraXVersion = '1.2.0'
    dependency = [
            amplify: [
                    api: "com.amplifyframework:aws-api:$amplifyVersion",
                    auth: "com.amplifyframework:aws-auth-cognito:$amplifyVersion",
                    predictions: "com.amplifyframework:aws-predictions:$amplifyVersion",
            ],
            android: [
                    desugar: "com.android.tools:desugar_jdk_libs:1.1.8"
            ],
            androidx: [
                    camera: [
                      core: "androidx.camera:camera-core:$cameraXVersion",
                      camera2: "androidx.camera:camera-camera2:$cameraXVersion",
                      lifecycle: "androidx.camera:camera-lifecycle:$cameraXVersion",
                    ],
                    futures: 'androidx.concurrent:concurrent-futures:1.1.0',
                    material: 'androidx.compose.material3:material3:1.0.1',
                    uiTooling: 'androidx.compose.ui:ui-tooling:1.3.2',
                    lifecycle_ktx: 'androidx.lifecycle:lifecycle-runtime-ktx:2.4.0',
                    compose: [
                            viewmodel: "androidx.lifecycle:lifecycle-viewmodel-compose:2.4.0"
                    ]
            ],
            kotlin: [
                    stdlib: 'org.jetbrains.kotlin:kotlin-stdlib:1.8.10',
                    serializationJson: 'org.jetbrains.kotlinx:kotlinx-serialization-json:1.3.3',
                    ktlint: 'org.jlleitschuh.gradle:ktlint-gradle:7.1.0',
            ],
            tensorFlow: 'org.tensorflow:tensorflow-lite:2.0.0',
            tensorFlowSupport: 'org.tensorflow:tensorflow-lite-support:0.3.0',
            test: [
                    androidx: [
                            core_ktx: 'androidx.test:core-ktx:1.3.0',
                            runner: 'androidx.test:runner:1.3.0',
                            junit: 'androidx.test.ext:junit:1.1.4',
                            espresso: 'androidx.test.espresso:espresso-core:3.5.0',
                    ],
                    junit: 'junit:junit:4.13.2',
                    robolectric: 'org.robolectric:robolectric:4.7',
                    mockk: 'io.mockk:mockk:1.13.4'
            ]
    ]
}

subprojects { project ->
    project.group = POM_GROUP

    apply plugin: 'org.jlleitschuh.gradle.ktlint'
    ktlint {
        android.set(true)
    }
    afterEvaluate {
        configureAndroidLibrary(project)
    }
    if (!project.name.contains("test")) {
        apply plugin: 'org.jetbrains.dokka'
        dokkaHtml {
            dokkaSourceSets {
                configureEach {
                    includeNonPublic.set(false)
                    skipEmptyPackages.set(true)
                    skipDeprecated.set(true)
                    reportUndocumented.set(true)
                    jdkVersion.set(8)
                }
            }
        }
    }
}

private void configureAndroidLibrary(Project project) {
    project.ext.VERSION_NAME = project.findProperty('VERSION_NAME')
    if (project.hasProperty('signingKeyId')) {
        System.out.println("Getting signing info from protected source.")
        project.ext.'signing.keyId' = findProperty('signingKeyId')
        project.ext.'signing.password' = findProperty('signingPassword')
        project.ext.'signing.inMemoryKey' = findProperty('signingInMemoryKey')
    }

    project.android {
        compileSdkVersion rootProject.ext.compileSdkVersion

        defaultConfig {
            multiDexEnabled true
            minSdkVersion project.findProperty('minSdkVersion')
            targetSdkVersion rootProject.ext.targetSdkVersion
            versionName project.ext.VERSION_NAME
            testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
            testInstrumentationRunnerArguments clearPackageData: 'true'
            consumerProguardFiles rootProject.file('configuration/consumer-rules.pro')

            testOptions {
                animationsDisabled = true
                unitTests {
                    includeAndroidResources = true
                }
            }

            buildConfigField "String", "VERSION_NAME", "\"${project.ext.VERSION_NAME}\""
        }

        lintOptions {
            warningsAsErrors true
            abortOnError true
            enable 'UnusedResources'
            enable 'NewerVersionAvailable'
        }

        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }

        kotlinOptions {
            jvmTarget = '1.8'
        }

        buildFeatures {
            compose true
        }

        composeOptions {
            kotlinCompilerExtensionVersion '1.4.3'
        }

        packagingOptions {
            exclude 'META-INF/DEPENDENCIES'
        }
    }
}
